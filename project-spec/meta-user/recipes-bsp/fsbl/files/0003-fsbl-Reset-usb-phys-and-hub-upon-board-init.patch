From db2538bce2ee661b49a5f0be2facdfbf69a00276 Mon Sep 17 00:00:00 2001
From: Elod Gyorgy <elod.gyorgy@digilent.ro>
Date: Tue, 29 Oct 2019 15:27:00 +0200
Subject: [PATCH 3/6] fsbl: Reset usb phys and hub upon board init

---
 lib/sw_apps/zynqmp_fsbl/src/spi_gpio.c    | 180 ++++++++++++++++++++++
 lib/sw_apps/zynqmp_fsbl/src/spi_gpio.h    |  41 +++++
 lib/sw_apps/zynqmp_fsbl/src/xfsbl_board.c |  91 +++++++++++
 lib/sw_apps/zynqmp_fsbl/src/xfsbl_board.h |  35 +++++
 4 files changed, 347 insertions(+)
 create mode 100644 lib/sw_apps/zynqmp_fsbl/src/spi_gpio.c
 create mode 100644 lib/sw_apps/zynqmp_fsbl/src/spi_gpio.h

diff --git a/lib/sw_apps/zynqmp_fsbl/src/spi_gpio.c b/lib/sw_apps/zynqmp_fsbl/src/spi_gpio.c
new file mode 100644
index 0000000000..48d2c88d4b
--- /dev/null
+++ b/lib/sw_apps/zynqmp_fsbl/src/spi_gpio.c
@@ -0,0 +1,180 @@
+/*
+ * MIT License
+ *
+ * Copyright (c) 2019 Digilent
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ *
+ *  Created on: Oct 28, 2019
+ *      Author: Elod Gyorgy
+ */
+
+#include "spi_gpio.h"
+#include "xspips.h"
+#include "sleep.h"
+
+#ifdef XPS_BOARD_GZU
+//MCP23S08
+#define SCLK_MAX_FREQ 10000000
+#define MCP23S08_READ 1
+#define MCP23S08_WRITE 0
+#define MCP23S08_ADDRESS 0x20
+#define RETRY_COUNT	10
+
+struct prescale_t
+{
+	u32 div;
+	u8 prescale;
+};
+static const struct prescale_t prescalers[] =
+{
+		{4, XSPIPS_CLK_PRESCALE_4},
+		{8, XSPIPS_CLK_PRESCALE_8},
+		{16, XSPIPS_CLK_PRESCALE_16},
+		{32, XSPIPS_CLK_PRESCALE_32},
+		{64, XSPIPS_CLK_PRESCALE_64},
+		{128, XSPIPS_CLK_PRESCALE_128},
+		{256, XSPIPS_CLK_PRESCALE_256}
+};
+
+static XSpiPs drv_inst;
+static u8 send_buf_[8];
+static u8 recv_buf_[8];
+
+/*
+ * @param dev_id SPI controller Device ID
+ * @param ssid slave-select ID of the GPIO expander (supported 0-2)
+ */
+XStatus SpiGpioInit(u32 dev_id, u8 ss_id)
+{
+	XSpiPs_Config *SpiConfig;
+	XStatus Status;
+
+	if (ss_id > 2) return XST_FAILURE;
+
+	/*
+	 * Initialize the SPI driver so that it's ready to use
+	 */
+	SpiConfig = XSpiPs_LookupConfig(dev_id);
+	if (NULL == SpiConfig) {
+		return XST_FAILURE;
+	}
+
+	Status = XSpiPs_CfgInitialize(&drv_inst, SpiConfig,
+				       SpiConfig->BaseAddress);
+	if (Status != XST_SUCCESS) {
+		return XST_FAILURE;
+	}
+
+	/*
+	 * Perform a self-test to check hardware build
+	 */
+	Status = XSpiPs_SelfTest(&drv_inst);
+	if (Status != XST_SUCCESS) {
+		return XST_FAILURE;
+	}
+
+	/*
+	 * Set the Spi device as a master
+	 * MODE 0 is having issues with clock not going low before SS goes low
+	 * MODE 3 (CPOL=1, CPHA=1) works fine
+	 */
+	XSpiPs_SetOptions(&drv_inst, XSPIPS_MASTER_OPTION | XSPIPS_FORCE_SSELECT_OPTION
+			| XSPIPS_CLK_ACTIVE_LOW_OPTION | XSPIPS_CLK_PHASE_1_OPTION);
+
+
+	size_t i;
+	for (i=0; i<sizeof(prescalers)/sizeof(prescalers[0]); ++i)
+	{
+		if (SpiConfig->InputClockHz / prescalers[i].div <= SCLK_MAX_FREQ)
+			break;
+	}
+
+	if (i>=sizeof(prescalers)/sizeof(prescalers[0]))
+	{
+		return XST_FAILURE;
+	}
+
+	XSpiPs_SetClkPrescaler(&drv_inst, prescalers[i].prescale);
+
+	XSpiPs_SetSlaveSelect(&drv_inst, ss_id);
+
+	u8 ipol;
+	//IPOL register should read 0x00 after reset
+	if (XST_SUCCESS != (Status = SpiGpioReadReg(MCP23S08_REG_IPOL, &ipol)))
+		return Status;
+	if (ipol != 0x00)
+		return XST_FAILURE;
+
+	return XST_SUCCESS;
+}
+/*
+ * @param reg is the register address to read
+ * @param value is a pointer to the variable to store the value read
+ * @returns 0 on success, non-zero on failure
+ */
+XStatus SpiGpioReadReg(u8 reg, u8* value)
+{
+	u32 timeout = RETRY_COUNT;
+	XStatus Status;
+
+	memset(send_buf_, 0xFF, sizeof(recv_buf_));
+	memset(recv_buf_, 0xFF, sizeof(recv_buf_));
+	send_buf_[0] = (MCP23S08_ADDRESS << 1) | MCP23S08_READ;
+	send_buf_[1] = reg;
+
+	while (XST_DEVICE_BUSY == (Status = XSpiPs_PolledTransfer(&drv_inst, send_buf_, recv_buf_, 3)) && --timeout)
+	{
+		usleep(1000);
+	}
+	if (!timeout)
+	{
+		return XST_FAILURE;
+	}
+
+	*value = recv_buf_[2];
+	return XST_SUCCESS;
+}
+/*
+ * @param reg is the register address to write
+ * @param value is the value write
+ * @returns 0 on success, non-zero on failure
+ */
+XStatus SpiGpioWriteReg(u8 reg, u8 value)
+{
+	u32 timeout = RETRY_COUNT;
+	XStatus Status;
+
+	memset(send_buf_, 0xFF, sizeof(recv_buf_));
+	memset(recv_buf_, 0xFF, sizeof(recv_buf_));
+	send_buf_[0] = (MCP23S08_ADDRESS << 1) | MCP23S08_WRITE;
+	send_buf_[1] = reg;
+	send_buf_[2] = value;
+
+	while (XST_DEVICE_BUSY == (Status = XSpiPs_PolledTransfer(&drv_inst, send_buf_, recv_buf_, 3)) && --timeout)
+	{
+		usleep(1000);
+	}
+	if (!timeout)
+	{
+		return XST_FAILURE;
+	}
+
+	return XST_SUCCESS;
+}
+#endif//XPS_BOARD_GZU
diff --git a/lib/sw_apps/zynqmp_fsbl/src/spi_gpio.h b/lib/sw_apps/zynqmp_fsbl/src/spi_gpio.h
new file mode 100644
index 0000000000..0d8ad27f68
--- /dev/null
+++ b/lib/sw_apps/zynqmp_fsbl/src/spi_gpio.h
@@ -0,0 +1,41 @@
+/*
+ * MIT License
+ *
+ * Copyright (c) 2019 Digilent
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ *
+ *  Created on: Oct 28, 2019
+ *      Author: Elod Gyorgy
+ */
+
+#ifndef SRC_SPI_GPIO_H_
+#define SRC_SPI_GPIO_H_
+
+#include "xstatus.h"
+
+#define SPI_GPIO_DEVICE_ID XPAR_PSU_SPI_0_DEVICE_ID
+#define MCP23S08_REG_IODIR 0x00
+#define MCP23S08_REG_IPOL 0x01
+#define MCP23S08_REG_PORT 0x09
+
+XStatus SpiGpioInit(u32 dev_id, u8 ss_id);
+XStatus SpiGpioReadReg(u8 reg, u8* value);
+XStatus SpiGpioWriteReg(u8 reg, u8 value);
+
+#endif /* SRC_SPI_GPIO_H_ */
diff --git a/lib/sw_apps/zynqmp_fsbl/src/xfsbl_board.c b/lib/sw_apps/zynqmp_fsbl/src/xfsbl_board.c
index ea9830c021..643348dfa6 100644
--- a/lib/sw_apps/zynqmp_fsbl/src/xfsbl_board.c
+++ b/lib/sw_apps/zynqmp_fsbl/src/xfsbl_board.c
@@ -788,6 +788,94 @@ static void XFsbl_PcieReset(void)
 }
 #endif
 #endif
+#if defined(XPS_BOARD_GZU)
+#include "sleep.h"
+#include "xgpiops.h"
+/*
+ * InitGpios is a board-specific init routine for the Digilent Genesys ZU.
+ * It resets the GPIO expander MCP23S08 using MIO13. Then through SS[1] of
+ * SPI0, it initializes it and cycles the USB PHY resets connected to it.
+ */
+static u32 InitGpios()
+{
+#if defined(XPAR_PSU_SPI_0_DEVICE_ID) && defined (XPAR_PSU_GPIO_0_DEVICE_ID)
+	u32 RegVal;
+	XStatus Status;
+	XGpioPs_Config* gpio_conf;
+	XGpioPs gpio_inst;
+
+	gpio_conf = XGpioPs_LookupConfig(XPAR_PSU_GPIO_0_DEVICE_ID);
+	if (NULL == gpio_conf) {
+		XFsbl_Printf(DEBUG_GENERAL, "XFSBL_GZU_GPIO_FAIL\r\n");
+		return XST_FAILURE;
+	}
+	if (XST_SUCCESS != XGpioPs_CfgInitialize(&gpio_inst, gpio_conf, gpio_conf->BaseAddr))
+	{
+		XFsbl_Printf(DEBUG_GENERAL, "XFSBL_GZU_GPIO_FAIL\r\n");
+		return XST_FAILURE;
+	}
+	//Set PORTEXP_RESETN_PIN as output and drive 0
+	XGpioPs_SetDirectionPin(&gpio_inst, PORTEXP_RESETN_PIN, 1);
+	XGpioPs_WritePin(&gpio_inst, PORTEXP_RESETN_PIN, 0);
+	XGpioPs_SetOutputEnablePin(&gpio_inst, PORTEXP_RESETN_PIN, 1);
+	(void)usleep(1);
+	//Set PORTEXP_RESETN_PIN tri-state (open-drain high).
+	XGpioPs_SetOutputEnablePin(&gpio_inst, PORTEXP_RESETN_PIN, 0);
+	(void)usleep(1);
+
+	//Init GPIO Expander
+	if (XST_SUCCESS != (Status = SpiGpioInit(MCP23S08_SPI_DEVID, MCP23S08_SS_ID)))
+	{
+		XFsbl_Printf(DEBUG_GENERAL, "XFSBL_GZU_GPIOE_INITFAIL\r\n");
+		return XST_FAILURE;
+	}
+
+	//Set default outputs
+	if (XST_SUCCESS != (SpiGpioWriteReg(MCP23S08_REG_PORT, MCP23S08_DEFAULTS)))
+	{
+		XFsbl_Printf(DEBUG_GENERAL, "XFSBL_GZU_GPIOE_DEFFAIL\r\n");
+		return XST_FAILURE;
+	}
+	//Set I/O direction
+	if (XST_SUCCESS != (SpiGpioWriteReg(MCP23S08_REG_IODIR, MCP23S08_IODIR)))
+	{
+		XFsbl_Printf(DEBUG_GENERAL, "XFSBL_GZU_GPIOE_DIRFAIL\r\n");
+		return XST_FAILURE;
+	}
+	// Set USB20_RESET, USB20H_RESET, USB20_HUB_RESETN
+	if (XST_SUCCESS != (SpiGpioReadReg(MCP23S08_REG_PORT, (u8*)&RegVal)))
+	{
+		XFsbl_Printf(DEBUG_GENERAL, "XFSBL_GZU_GPIOE_READFAIL\r\n");
+		return XST_FAILURE;
+	}
+	RegVal |= 0x10;
+	RegVal |= 0x20;
+	RegVal &= ~(0x40);
+	if (XST_SUCCESS != (SpiGpioWriteReg(MCP23S08_REG_PORT, (u8)RegVal)))
+	{
+		XFsbl_Printf(DEBUG_GENERAL, "XFSBL_GZU_GPIOE_SETRSTFAIL\r\n");
+		return XST_FAILURE;
+	}
+	//10us reset pulse covers it
+	//USB3320 tmin=1us
+	//USB2513 tmin=1us
+	(void)usleep(10);
+
+	//Set default outputs
+	if (XST_SUCCESS != (SpiGpioWriteReg(MCP23S08_REG_PORT, MCP23S08_DEFAULTS)))
+	{
+		XFsbl_Printf(DEBUG_GENERAL, "XFSBL_GZU_GPIOE_CLRRSTFAIL\r\n");
+		return XST_FAILURE;
+	}
+
+	return XST_SUCCESS;
+#else
+	XFsbl_Printf(DEBUG_GENERAL, "XFSBL_GZU_NOSPI0_NOGPIO0\r\n");
+	return XST_FAILURE;
+#endif
+}
+#endif
+
 /*****************************************************************************/
 /**
  * This function does board specific initialization.
@@ -816,6 +904,9 @@ u32 XFsbl_BoardInit(void)
 #if defined(XPS_BOARD_ZCU102)
 	XFsbl_PcieReset();
 #endif
+#elif defined(XPS_BOARD_GZU)
+	XFsbl_Printf(DEBUG_INFO,"Digilent Genesys ZU board-specific init\n\r");
+	Status = InitGpios();
 #else
 	Status = XFSBL_SUCCESS;
 	goto END;
diff --git a/lib/sw_apps/zynqmp_fsbl/src/xfsbl_board.h b/lib/sw_apps/zynqmp_fsbl/src/xfsbl_board.h
index 1f4dbec2b2..7949082d25 100644
--- a/lib/sw_apps/zynqmp_fsbl/src/xfsbl_board.h
+++ b/lib/sw_apps/zynqmp_fsbl/src/xfsbl_board.h
@@ -176,6 +176,41 @@ typedef struct XVoutCommands {
 
 /************************** Function Prototypes ******************************/
 #endif
+
+#if defined(XPS_BOARD_GZU)
+#include "xgpiops_hw.h"
+#include "spi_gpio.h"
+/*
+ * Digilent Genesys ZU has an MCP23S08 GPIO expander connected to MIO.
+ * Board init functions below will reset the expander, configure I/O
+ * direction, and cycle resets.
+ * If PSU_SPI_0 is not enabled and SS1 is not mapped to MIO14, init will fail.
+ * If PS GPIO is not enabled and MIO13 not mapped to it, init might fail.
+ */
+#define MCP23S08_SPI_DEVID 0
+#define MCP23S08_SS_ID 1
+#define PORTEXP_RESETN_PIN	13
+#define MCP23S08_DEFAULTS \
+	(0 << 0 /*WIFI_CE*/ \
+	|0 << 1 /*WIFI_IRQ*/ \
+	|1 << 2 /*WIFI_RSTN*/ \
+	|0 << 3 /*WIFI_WAKE*/ \
+	|0 << 4 /*USB20_RESET*/ \
+	|0 << 5 /*USB20H_RESET*/ \
+	|1 << 6 /*USB20_HUB_RESETN*/ \
+	|0 << 7 /*USB30_HC*/ \
+	)
+#define MCP23S08_IODIR \
+	(0 << 0 /*WIFI_CE*/ \
+	|1 << 1 /*WIFI_IRQ*/ \
+	|0 << 2 /*WIFI_RSTN*/ \
+	|0 << 3 /*WIFI_WAKE*/ \
+	|0 << 4 /*USB20_RESET*/ \
+	|0 << 5 /*USB20H_RESET*/ \
+	|0 << 6 /*USB20_HUB_RESETN*/ \
+	|0 << 7 /*USB30_HC*/ \
+	)
+#endif
 u32 XFsbl_BoardInit(void);
 
 #ifdef __cplusplus
-- 
2.17.1

