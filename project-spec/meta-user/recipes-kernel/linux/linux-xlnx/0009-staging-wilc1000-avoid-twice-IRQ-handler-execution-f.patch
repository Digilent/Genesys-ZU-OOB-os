From d4f42a0a6aab1ad5b7f5caa3aff80d607339c87d Mon Sep 17 00:00:00 2001
From: Adham Abozaeid <adham.abozaeid@microchip.com>
Date: Tue, 10 Sep 2019 11:00:22 -0700
Subject: [PATCH 09/17] staging: wilc1000: avoid twice IRQ handler execution
 for each single interrupt
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The IRQ handler(isr_bh_routine()) was called twice for each interrupt
from firmware. The data was read completely during the first call and
the second call was doing nothing.
Now changed the IRQ flag from ‘level’ to ‘edge’ trigger i.e
IRQF_TRIGGER_LOW to IRQF_TRIGGER_FALLING to avoid extra interrupt
trigger.

Signed-off-by: Ajay Singh <ajay.kathat@microchip.com>
Signed-off-by: Adham Abozaeid <adham.abozaeid@microchip.com>
---
 drivers/staging/wilc/wilc_netdev.c | 5 +----
 1 file changed, 1 insertion(+), 4 deletions(-)

diff --git a/drivers/staging/wilc/wilc_netdev.c b/drivers/staging/wilc/wilc_netdev.c
index e216ba7b1f58..9896834515c2 100644
--- a/drivers/staging/wilc/wilc_netdev.c
+++ b/drivers/staging/wilc/wilc_netdev.c
@@ -130,8 +130,6 @@ static irqreturn_t isr_uh_routine(int irq, void *user_data)
 {
 	struct wilc *wilc = (struct wilc *)user_data;
 
-	pr_info("%s: Interrupt received UH\n", __func__);
-
 	if (wilc->close) {
 		pr_err("%s: Can't handle UH interrupt\n", __func__);
 		return IRQ_HANDLED;
@@ -148,7 +146,6 @@ static irqreturn_t isr_bh_routine(int irq, void *userdata)
 		return IRQ_HANDLED;
 	}
 
-	pr_info("%s: Interrupt received BH\n", __func__);
 	wilc_handle_isr(wilc);
 
 	return IRQ_HANDLED;
@@ -207,7 +204,7 @@ static int init_irq(struct net_device *dev)
 	if (wl->io_type == WILC_HIF_SPI ||
 		wl->io_type == WILC_HIF_SDIO_GPIO_IRQ) {
 		if (request_threaded_irq(wl->dev_irq_num, isr_uh_routine,
-					 isr_bh_routine, IRQF_TRIGGER_LOW |
+					 isr_bh_routine, IRQF_TRIGGER_FALLING |
 							IRQF_ONESHOT |
 							IRQF_NO_SUSPEND,
 					 "WILC_IRQ", wl) < 0) {
-- 
2.23.0

