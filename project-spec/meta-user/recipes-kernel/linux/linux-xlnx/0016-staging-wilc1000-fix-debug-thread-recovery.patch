From bf7f08c65183c27ccf290d6ee42e11a39fe25153 Mon Sep 17 00:00:00 2001
From: Adham Abozaeid <adham.abozaeid@microchip.com>
Date: Thu, 26 Sep 2019 12:39:58 -0700
Subject: [PATCH 16/17] staging: wilc1000: fix debug thread recovery

Fix debug thread error recovery mechanism

Signed-off-by: Ajay Singh <ajay.kathat@microchip.com>
Signed-off-by: Adham Abozaeid <adham.abozaeid@microchip.com>
---
 drivers/staging/wilc/wilc_hif.c           | 18 +++++
 drivers/staging/wilc/wilc_hif.h           |  1 +
 drivers/staging/wilc/wilc_netdev.c        | 85 ++++++++++++-----------
 drivers/staging/wilc/wilc_wfi_netdevice.h |  1 +
 4 files changed, 65 insertions(+), 40 deletions(-)

diff --git a/drivers/staging/wilc/wilc_hif.c b/drivers/staging/wilc/wilc_hif.c
index d763ebb9994c..2a85cc300ed5 100644
--- a/drivers/staging/wilc/wilc_hif.c
+++ b/drivers/staging/wilc/wilc_hif.c
@@ -586,6 +586,23 @@ static int wilc_send_connect_wid(struct wilc_vif *vif)
 	return result;
 }
 
+void handle_connect_cancel(struct wilc_vif *vif)
+{
+	struct host_if_drv *hif_drv = vif->hif_drv;
+
+	if (hif_drv->conn_info.conn_result) {
+		hif_drv->conn_info.conn_result(EVENT_DISCONN_NOTIF,
+					       0, hif_drv->conn_info.arg);
+	}
+
+	eth_zero_addr(hif_drv->assoc_bssid);
+
+	hif_drv->conn_info.req_ies_len = 0;
+	kfree(hif_drv->conn_info.req_ies);
+	hif_drv->conn_info.req_ies = NULL;
+	hif_drv->hif_state = HOST_IF_IDLE;
+}
+
 static void handle_connect_timeout(struct work_struct *work)
 {
 	struct host_if_msg *msg = container_of(work, struct host_if_msg, work);
@@ -1042,6 +1059,7 @@ int wilc_disconnect(struct wilc_vif *vif)
 	conn_info->req_ies_len = 0;
 	kfree(conn_info->req_ies);
 	conn_info->req_ies = NULL;
+	conn_info->conn_result = NULL;
 
 	return 0;
 }
diff --git a/drivers/staging/wilc/wilc_hif.h b/drivers/staging/wilc/wilc_hif.h
index 7399e3c9ef4a..5210975b402f 100644
--- a/drivers/staging/wilc/wilc_hif.h
+++ b/drivers/staging/wilc/wilc_hif.h
@@ -254,4 +254,5 @@ void wilc_network_info_received(struct wilc *wilc, u8 *buffer, u32 length);
 void wilc_gnrl_async_info_received(struct wilc *wilc, u8 *buffer, u32 length);
 void *wilc_parse_join_bss_param(struct cfg80211_bss *bss,
 				struct cfg80211_crypto_settings *crypto);
+void handle_connect_cancel(struct wilc_vif *vif);
 #endif
diff --git a/drivers/staging/wilc/wilc_netdev.c b/drivers/staging/wilc/wilc_netdev.c
index 8875613b0ebe..6f0b96bf249f 100644
--- a/drivers/staging/wilc/wilc_netdev.c
+++ b/drivers/staging/wilc/wilc_netdev.c
@@ -28,16 +28,11 @@ int wait_for_recovery;
 static int debug_thread(void *arg)
 {
 	struct wilc *wl = arg;
-	struct wilc_vif *vif = wilc_get_wl_to_vif(wl);
+	struct wilc_vif *vif;
 	signed long timeout;
 	struct host_if_drv *hif_drv;
 	int i = 0;
 
-	if (IS_ERR(vif))
-		return -1;
-
-	hif_drv = vif->priv.hif_drv;
-
 	complete(&wl->debug_thread_started);
 
 	while (1) {
@@ -57,65 +52,73 @@ static int debug_thread(void *arg)
 			pr_info("Exit debug thread\n");
 			return 0;
 		}
-		vif = wilc_get_wl_to_vif(wl);
-
 		if (!debug_running)
 			continue;
-		PRINT_D(vif->ndev, GENERIC_DBG,
-			   "*** Debug Thread Running ***\n");
+
+		pr_debug("%s *** Debug Thread Running ***cnt[%d]\n", __func__,
+			 cfg_packet_timeout);
+
 		if (cfg_packet_timeout < 5)
 			continue;
 
-		PRINT_INFO(vif->ndev, GENERIC_DBG,
-			   "<Recover>\n");
+		pr_info("%s <Recover>\n", __func__);
 		cfg_packet_timeout = 0;
 		timeout = 10;
 		recovery_on = 1;
 		wait_for_recovery = 1;
 
 		srcu_idx = srcu_read_lock(&wl->srcu);
-		list_for_each_entry_rcu(vif, &wl->vif_list, list)
-			wilc_mac_close(vif->ndev);
-
+		list_for_each_entry_rcu(vif, &wl->vif_list, list) {
+			//close the interface only if it was open
+			if (vif->mac_opened) {
+				wilc_mac_close(vif->ndev);
+				vif->restart = 1;
+			}
+		}
 		//TODO://Need to find way to call them in reverse
 		i = 0;
 		list_for_each_entry_rcu(vif, &wl->vif_list, list) {
+			struct wilc_conn_info *info;
+
+			// Only open the interface manually closed earlier
+			if (!vif->restart)
+				continue;
 			i++;
+			hif_drv = vif->priv.hif_drv;
 			while (wilc_mac_open(vif->ndev) && --timeout)
 				msleep(100);
 
 			if (timeout == 0)
 				PRINT_WRN(vif->ndev, GENERIC_DBG,
 					  "Couldn't restart ifc %d\n", i);
-		}
-		srcu_read_unlock(&wl->srcu, srcu_idx);
 
-		if (hif_drv->hif_state == HOST_IF_CONNECTED) {
-			struct wilc_conn_info *conn_info = &hif_drv->conn_info;
-
-			PRINT_INFO(vif->ndev, GENERIC_DBG,
-				   "notify the user with the Disconnection\n");
-			if (hif_drv->usr_scan_req.scan_result) {
+			if (hif_drv->hif_state == HOST_IF_CONNECTED) {
+				info = &hif_drv->conn_info;
 				PRINT_INFO(vif->ndev, GENERIC_DBG,
-					   "Abort the running OBSS Scan\n");
-				del_timer(&hif_drv->scan_timer);
-				handle_scan_done(vif, SCAN_EVENT_ABORTED);
-			}
-			if (conn_info->conn_result) {
-				conn_info->conn_result(EVENT_DISCONN_NOTIF,
-						       0, conn_info->arg);
-			} else {
-				PRINT_ER(vif->ndev,
-					 "Connect result NULL\n");
+					   "notify the user with the Disconnection\n");
+				if (hif_drv->usr_scan_req.scan_result) {
+					PRINT_INFO(vif->ndev, GENERIC_DBG,
+						   "Abort the running OBSS Scan\n");
+					del_timer(&hif_drv->scan_timer);
+					handle_scan_done(vif,
+							 SCAN_EVENT_ABORTED);
+				}
+				if (info->conn_result) {
+					info->conn_result(EVENT_DISCONN_NOTIF,
+							  0, info->arg);
+				} else {
+					PRINT_ER(vif->ndev,
+						 "Connect result NULL\n");
+				}
+				eth_zero_addr(hif_drv->assoc_bssid);
+				info->req_ies_len = 0;
+				kfree(info->req_ies);
+				info->req_ies = NULL;
+				hif_drv->hif_state = HOST_IF_IDLE;
 			}
-			eth_zero_addr(hif_drv->assoc_bssid);
-
-			conn_info->req_ies_len = 0;
-			kfree(conn_info->req_ies);
-			conn_info->req_ies = NULL;
-
-			hif_drv->hif_state = HOST_IF_IDLE;
+			vif->restart = 0;
 		}
+		srcu_read_unlock(&wl->srcu, srcu_idx);
 		recovery_on = 0;
 	}
 	return 0;
@@ -1236,6 +1239,8 @@ static int wilc_mac_close(struct net_device *ndev)
 	if (vif->ndev) {
 		netif_stop_queue(vif->ndev);
 
+	handle_connect_cancel(vif);
+
 	if (!recovery_on)
 		wilc_deinit_host_int(vif->ndev);
 	}
diff --git a/drivers/staging/wilc/wilc_wfi_netdevice.h b/drivers/staging/wilc/wilc_wfi_netdevice.h
index e96105763942..e01d6b0a55a3 100644
--- a/drivers/staging/wilc/wilc_wfi_netdevice.h
+++ b/drivers/staging/wilc/wilc_wfi_netdevice.h
@@ -241,6 +241,7 @@ struct wilc_vif {
 	bool connecting;
 	struct wilc_priv priv;
 	struct list_head list;
+	u8 restart;
 };
 
 struct wilc {
-- 
2.23.0

