#!/bin/sh

set -e
#Usage info

die(){
	printf '%s\n' "$1" >&2
	exit 1
}

isNAN() {
	if [ -n "$1" ] && [ "$1" -eq "$1" ] 2>/dev/null; then
		return 1; #succes
	else
		return 0; #error
	fi
}

show_help (){
cat << EOF
Usage : ${0##*/} [-h] [-t device_type] [-i index] [-d delay] [-m max_fill] [-s step] [device_file]
	-h --help		Display this help and exit

	-t --type		Type of uio to test:
					"btn" Buttons:,
					"sw" (for switches), "led" ,
					"rgb_led" RGB led controlled by pwm

	Optiont for button, switch, led:
	-i --index		Index of switch , led or button
				Example:
				${0##*/} -t led -i 1
				${0##*/} -t switch -i 0

	Optiont for rgb_led:
	-d --delay		Delay between steps in seconds example: --delay=0.2
	-m --max-fill		Max fill for the pwm. Max value 255: --max-fill=200
	-s --step		Step size when incrementing color fill: --step=10
EOF
}

show_vars(){
	echo file: $file;
	echo
	echo device type: $dev_type;
	echo index: $index;
	echo
	echo step: $step;
	echo delay: $delay;
	echo max-fill: $full;
}


file=

dev_type=rgb_led;
index=0;
step=10
delay=1
full=255

verbose=0;

while :; do
	case $1 in
		-h|-\?|--help)
			show_help
			exit
			;;
		-t|--type)
			if [ "$2" ]; then
				dev_type=$2
				shift
			else
				die 'ERROR: "-t|--type" requires a non-empty option argument.'
			fi
			;;
		--type=?*)
				dev_type=${1#*=}
			;;
		--type=)
				die 'ERROR: "--type=" requires a non-empty option argument.'
			;;
		-i|--index)
			if [ "$2" ]; then
				index=$2
				#isNAN $index && die 'ERROR: "-i|--index" requires a number option argument.';
				shift
			else
				die 'ERROR: "-i|--index" requires a non-empty option argument.'
			fi
			;;
		--index=?*)
				index=${1#*=}
				#isNAN $index && die 'ERROR: "-i|--index" requires a number option argument.';
			;;
		--index=)
				die 'ERROR: "--index=" requires a non-empty option argument.'
			;;
		-d|--delay)
			if [ "$2" ]; then
				delay=$2
				#isNAN $delay && die 'ERROR: "-d|--delay" requires a number option argument.';
				shift
			else
				die 'ERROR: "-d|--delay" requires a non-empty option argument.'
			fi
			;;
		--delay=?*)
				delay=${1#*=}
				#isNAN $delay && die 'ERROR: "-d|--delay" requires a number option argument.';
			;;
		--delay=)
				die 'ERROR: "--delay=" requires a non-empty option argument.'
			;;
		-s|--step)
			if [ "$2" ]; then
				step=$2
				isNAN $step && die 'ERROR: "-s|--step" requires a number option argument.';
				shift
			else
				die 'ERROR: "-s|--step" requires a non-empty option argument.'
			fi
			;;
		--step=?*)
				step=${1#*=}
				isNAN $step && die 'ERROR: "-s|--step" requires a number option argument.';
			;;
		--step=)
				die 'ERROR: "--step=" requires a non-empty option argument.'
			;;
		-m|--max-fill)
			if [ "$2" ]; then
					full=$2
					isNAT $full && die 'ERROR: "-m|--max-fill" requires a number option argument.';
				shift
			else
				die 'ERROR: "-m|--max-fill" requires a non-empty option argument.'
			fi
			;;
		--max-fill=?*)
				full=${1#*=}
				isNAT $full && die 'ERROR: "-m|--max-fill" requires a number option argument.';
			;;
		--max-fill=)
				die 'ERROR: "--max-fill=" requires a non-empty option argument.'
			;;
		--) # End of all option
			shift
			break
			;;
		-?*)
			printf 'WARN: Unknown petion (ignored): %s\n' "$1" >&2
			;;
		*) #Default case: No more options, so brake the loop.
			break
	esac
	shift
done

file=$1
rgb_led_test(){

	red_fill=0;
	green_fill=0;
	blue_fill=0;

	#echo "MAGENTA" > test_out;
	for magenta_fill in $(seq 0 $step $full); do
		printf "0x%02x%02x%02x" "$magenta_fill" "$green_fill" "$magenta_fill" > $file;
		sleep $delay;
	done

	#echo "RED" > test_out;
	for red_fill in $(seq 0 $step $full); do
		printf "0x%02x%02x%02x" "$red_fill" "$green_fill" "$blue_fill" > $file;
		sleep $delay;
	done
	red_fill=0;

	#echo "YELLOW" > test_out;
	for yellow_fill in $(seq 0 $step $full); do
		printf "0x%02x%02x%02x" "$yellow_fill" "$yellow_fill" "$blue_fill" > $file;
		sleep $delay;
	done

	#echo "GREEN" >> test_out;
	for green_fill in $(seq 0 $step $full); do
		printf "0x%02x%02x%02x" "$red_fill" "$green_fill" "$blue_fill" > $file;
		sleep $delay;
	done
	green_fill=0;

	#echo "CYAN" > test_out;
	for cyan_fill in $(seq 0 $step $full); do
		printf "0x%02x%02x%02x" "$red_fill" "$cyan_fill" "$cyan_fill" > $file;
		sleep $delay;
	done

	#echo "BLUE" >> test_out
	for blue_fill in $(seq 0 $step $full); do
		printf "0x%02x%02x%02x" "$red_fill" "$green_fill" "$blue_fill" > $file;
		sleep $delay;
	done
	blue_fill=0;

	printf "0x%02x%02x%02x" "$red_fill" "$green_fill" "$blue_fill" > $file;
}

case $dev_type in
led)
	echo Led
	show_vars;
	gpioset $(gpiofind led${index})=1;
	sleep $delay;
	gpioset $(gpiofind led${index})=0;
	;;
btn)
	echo Button
	show_vars;
	gpiomon -n 1 -r -s $(gpiofind btn${index}) # return on press (rising edge)
	;;
sw)
	echo Switch
	show_vars;
	gpiomon -n 1 -r -s $(gpiofind sw${index}) # return on press (rising edge)
	;;
rgb_led)
	echo RGB Led
	file=${file:-"/sys/module/pwm_rgb_led/parameters/pwm_color_fill"};
	show_vars;
	rgb_led_test;
	;;
*) die "ERROR: No such device \"${dev_type}\"";
esac
